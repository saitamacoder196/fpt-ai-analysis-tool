import streamlit as st
import pandas as pd
import numpy as np
import time
import requests
import json
import os
import sys
from datetime import datetime

# Import c√°c service v√† utility
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from services.bachan_service import BAchanService
from utils.data_processor import DataProcessor

title = "BAchan Workplace"

def render():
    st.title("Chat v·ªõi BAchan Workplace")
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ token trong session state ch∆∞a
    if "bachan_token" not in st.session_state:
        st.session_state.bachan_token = ""
    
    # Ki·ªÉm tra chat history
    if "bachan_messages" not in st.session_state:
        st.session_state.bachan_messages = []
    
    # Form nh·∫≠p API token
    with st.expander("C·∫•u h√¨nh BAchan API", expanded=not bool(st.session_state.bachan_token)):
        token = st.text_input(
            "BAchan API Token",
            value=st.session_state.bachan_token,
            type="password",
            help="Nh·∫≠p token API cho BAchan Workplace"
        )
        
        if st.button("K·∫øt n·ªëi v·ªõi BAchan"):
            if token:
                # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
                # ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng
                with st.spinner("ƒêang k·∫øt n·ªëi..."):
                    # Gi·∫£ l·∫≠p k·∫øt n·ªëi th√†nh c√¥ng
                    time.sleep(1)
                    st.session_state.bachan_token = token
                    st.session_state.bachan_connected = True
                    st.success("K·∫øt n·ªëi v·ªõi BAchan th√†nh c√¥ng!")
            else:
                st.error("Vui l√≤ng nh·∫≠p token API")
    
    # N·∫øu ch∆∞a c√≥ token, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    if not st.session_state.get("bachan_connected", False):
        if st.session_state.bachan_token:
            # N·∫øu ƒë√£ c√≥ token nh∆∞ng ch∆∞a k·∫øt n·ªëi
            st.warning("Vui l√≤ng nh·∫•n 'K·∫øt n·ªëi v·ªõi BAchan' ƒë·ªÉ ti·∫øp t·ª•c")
        else:
            # N·∫øu ch∆∞a c√≥ token
            st.info("Vui l√≤ng nh·∫≠p token API ƒë·ªÉ k·∫øt n·ªëi v·ªõi BAchan Workplace")
            
            st.markdown("""
            ### H∆∞·ªõng d·∫´n l·∫•y BAchan API Token
            
            1. ƒêƒÉng nh·∫≠p v√†o BAchan Workplace
            2. Truy c·∫≠p ph·∫ßn c√†i ƒë·∫∑t t√†i kho·∫£n
            3. T·∫°o v√† sao ch√©p API token
            """)
        return
    
    # T·∫°o instance c·ªßa service
    bachan_service = BAchanService(st.session_state.bachan_token)
    
    # Giao di·ªán chat
    st.subheader("Chat v·ªõi BAchan")
    
    # Container ƒë·ªÉ hi·ªÉn th·ªã chat
    chat_container = st.container()
    
    # Hi·ªÉn th·ªã tin nh·∫Øn t·ª´ l·ªãch s·ª≠
    with chat_container:
        for message in st.session_state.bachan_messages:
            if message["role"] == "user":
                st.chat_message("user").write(message["content"])
            else:
                st.chat_message("assistant", avatar="ü§ñ").write(message["content"])
    
    # Input cho ng∆∞·ªùi d√πng
    user_input = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")
    
    # X·ª≠ l√Ω tin nh·∫Øn n·∫øu c√≥
    if user_input:
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.chat_message("user").write(user_input)
        
        # L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠
        st.session_state.bachan_messages.append({"role": "user", "content": user_input})
        
        # X·ª≠ l√Ω v√† g·ª≠i tin nh·∫Øn ƒë·∫øn BAchan
        with st.spinner("BAchan ƒëang tr·∫£ l·ªùi..."):
            # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API th·ª±c s·ª±
            # ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng ph·∫£n h·ªìi
            response = generate_bachan_response(user_input)
            
            # Hi·ªÉn th·ªã ph·∫£n h·ªìi
            st.chat_message("assistant", avatar="ü§ñ").write(response)
            
            # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
            st.session_state.bachan_messages.append({"role": "assistant", "content": response})
    
    # C√¥ng c·ª• b·ªï sung
    st.sidebar.subheader("C√¥ng c·ª• BAchan")
    
    # T√πy ch·ªçn x√≥a l·ªãch s·ª≠
    if st.sidebar.button("X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.bachan_messages = []
        st.experimental_rerun()
    
    # Ch·ªçn ch·∫ø ƒë·ªô
    mode = st.sidebar.radio(
        "Ch·∫ø ƒë·ªô BAchan",
        ["Chatbot", "Tr·ª£ l√Ω t√°c v·ª•", "Ph√¢n t√≠ch d·ªØ li·ªáu"]
    )
    
    # Hi·ªÉn th·ªã c√°c c√¥ng c·ª• d·ª±a tr√™n ch·∫ø ƒë·ªô
    if mode == "Tr·ª£ l√Ω t√°c v·ª•":
        st.sidebar.subheader("T√°c v·ª• nhanh")
        
        task_type = st.sidebar.selectbox(
            "Ch·ªçn lo·∫°i t√°c v·ª•",
            ["L√™n l·ªãch h·ªçp", "T·∫°o b√°o c√°o", "Qu·∫£n l√Ω nhi·ªám v·ª•", "Nh·∫Øc nh·ªü"]
        )
        
        if task_type == "L√™n l·ªãch h·ªçp":
            with st.sidebar.form("schedule_meeting"):
                st.subheader("L√™n l·ªãch h·ªçp")
                meeting_title = st.text_input("Ti√™u ƒë·ªÅ cu·ªôc h·ªçp")
                meeting_date = st.date_input("Ng√†y")
                meeting_time = st.time_input("Gi·ªù")
                participants = st.text_area("Ng∆∞·ªùi tham gia (m·ªói ng∆∞·ªùi m·ªôt d√≤ng)")
                
                submitted = st.form_submit_button("T·∫°o l·ªãch h·ªçp")
                if submitted:
                    st.success("ƒê√£ t·∫°o l·ªãch h·ªçp th√†nh c√¥ng!")
                    
                    # Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ chat
                    meeting_info = f"""
                    ƒê√£ t·∫°o l·ªãch h·ªçp:
                    - Ti√™u ƒë·ªÅ: {meeting_title}
                    - Th·ªùi gian: {meeting_date} {meeting_time}
                    - Ng∆∞·ªùi tham gia: {participants}
                    """
                    
                    # Hi·ªÉn th·ªã tin nh·∫Øn
                    st.chat_message("assistant", avatar="ü§ñ").write(meeting_info)
                    
                    # L∆∞u v√†o l·ªãch s·ª≠
                    st.session_state.bachan_messages.append({"role": "assistant", "content": meeting_info})
        
        elif task_type == "T·∫°o b√°o c√°o":
            with st.sidebar.form("create_report"):
                st.subheader("T·∫°o b√°o c√°o")
                report_title = st.text_input("Ti√™u ƒë·ªÅ b√°o c√°o")
                report_type = st.selectbox("Lo·∫°i b√°o c√°o", ["H√†ng ng√†y", "H√†ng tu·∫ßn", "H√†ng th√°ng"])
                department = st.selectbox("Ph√≤ng ban", ["AI Lab", "R&D", "Sales", "Marketing", "All"])
                include_charts = st.checkbox("Bao g·ªìm bi·ªÉu ƒë·ªì")
                
                submitted = st.form_submit_button("T·∫°o b√°o c√°o")
                if submitted:
                    st.success("ƒê√£ t·∫°o b√°o c√°o th√†nh c√¥ng!")
                    
                    # Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ chat
                    report_info = f"""
                    ƒê√£ t·∫°o b√°o c√°o:
                    - Ti√™u ƒë·ªÅ: {report_title}
                    - Lo·∫°i: {report_type}
                    - Ph√≤ng ban: {department}
                    - Bi·ªÉu ƒë·ªì: {"C√≥" if include_charts else "Kh√¥ng"}
                    """
                    
                    # Hi·ªÉn th·ªã tin nh·∫Øn
                    st.chat_message("assistant", avatar="ü§ñ").write(report_info)
                    
                    # L∆∞u v√†o l·ªãch s·ª≠
                    st.session_state.bachan_messages.append({"role": "assistant", "content": report_info})
    
    elif mode == "Ph√¢n t√≠ch d·ªØ li·ªáu":
        st.sidebar.subheader("Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi BAchan")
        
        analysis_type = st.sidebar.selectbox(
            "Lo·∫°i ph√¢n t√≠ch",
            ["D·ªØ li·ªáu kinh doanh", "D·ªØ li·ªáu ng∆∞·ªùi d√πng", "D·ªØ li·ªáu hi·ªáu su·∫•t"]
        )
        
        data_source = st.sidebar.selectbox(
            "Ngu·ªìn d·ªØ li·ªáu",
            ["FPT.AI Data", "Maya Portal", "Upload file Excel/CSV"]
        )
        
        if data_source == "Upload file Excel/CSV":
            uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n file d·ªØ li·ªáu", type=["csv", "xlsx"])
            
            if uploaded_file is not None:
                st.sidebar.success("ƒê√£ t·∫£i l√™n file th√†nh c√¥ng!")
                
                if st.sidebar.button("Ph√¢n t√≠ch d·ªØ li·ªáu"):
                    with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                        # Gi·∫£ l·∫≠p ph√¢n t√≠ch d·ªØ li·ªáu
                        time.sleep(2)
                        
                        # T·∫°o k·∫øt qu·∫£ ph√¢n t√≠ch gi·∫£ l·∫≠p
                        analysis_result = f"""
                        # K·∫øt qu·∫£ ph√¢n t√≠ch {analysis_type}
                        
                        ƒê√£ ph√¢n t√≠ch file: {uploaded_file.name}
                        
                        ## T·ªïng quan
                        - S·ªë l∆∞·ª£ng b·∫£n ghi: 1,253
                        - Th·ªùi gian ph√¢n t√≠ch: 2.3 gi√¢y
                        
                        ## C√°c ph√°t hi·ªán ch√≠nh
                        1. TƒÉng tr∆∞·ªüng ·ªïn ƒë·ªãnh 15% so v·ªõi th√°ng tr∆∞·ªõc
                        2. Ph√°t hi·ªán 3 ƒëi·ªÉm d·ªØ li·ªáu ngo·∫°i l·ªá c·∫ßn ki·ªÉm tra
                        3. Xu h∆∞·ªõng tƒÉng m·∫°nh trong nh√≥m kh√°ch h√†ng doanh nghi·ªáp
                        
                        ## ƒê·ªÅ xu·∫•t
                        - T·∫≠p trung v√†o ph√¢n kh√∫c kh√°ch h√†ng doanh nghi·ªáp
                        - Ki·ªÉm tra l·∫°i c√°c ƒëi·ªÉm d·ªØ li·ªáu ngo·∫°i l·ªá
                        - C·∫ßn thu th·∫≠p th√™m d·ªØ li·ªáu v·ªÅ [chi ti·∫øt A] ƒë·ªÉ ph√¢n t√≠ch s√¢u h∆°n
                        """
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong chat
                        st.chat_message("assistant", avatar="ü§ñ").write(analysis_result)
                        
                        # L∆∞u v√†o l·ªãch s·ª≠
                        st.session_state.bachan_messages.append({"role": "assistant", "content": analysis_result})
        
        else:
            st.sidebar.info(f"S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ {data_source}")
            
            if st.sidebar.button("L·∫•y v√† ph√¢n t√≠ch d·ªØ li·ªáu"):
                with st.spinner(f"ƒêang l·∫•y v√† ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ {data_source}..."):
                    # Gi·∫£ l·∫≠p ph√¢n t√≠ch d·ªØ li·ªáu
                    time.sleep(2)
                    
                    # T·∫°o k·∫øt qu·∫£ ph√¢n t√≠ch gi·∫£ l·∫≠p
                    analysis_result = f"""
                    # K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {data_source}
                    
                    ## T·ªïng quan
                    - S·ªë l∆∞·ª£ng b·∫£n ghi: 2,561
                    - Th·ªùi gian: 30 ng√†y g·∫ßn ƒë√¢y
                    
                    ## C√°c ph√°t hi·ªán ch√≠nh
                    1. TƒÉng tr∆∞·ªüng 23% so v·ªõi th√°ng tr∆∞·ªõc
                    2. Hi·ªáu su·∫•t API ƒë·∫°t 98.7%
                    3. Chi ph√≠ trung b√¨nh gi·∫£m 5%
                    
                    ## ƒê·ªÅ xu·∫•t
                    - Ti·∫øp t·ª•c t·ªëi ∆∞u h√≥a API calls
                    - Theo d√µi m·∫´u s·ª≠ d·ª•ng m·ªõi c·ªßa ng∆∞·ªùi d√πng
                    - Chu·∫©n b·ªã cho ƒë·ª£t tƒÉng l∆∞u l∆∞·ª£ng d·ª± ki·∫øn v√†o th√°ng sau
                    """
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong chat
                    st.chat_message("assistant", avatar="ü§ñ").write(analysis_result)
                    
                    # L∆∞u v√†o l·ªãch s·ª≠
                    st.session_state.bachan_messages.append({"role": "assistant", "content": analysis_result})

# H√†m t·∫°o ph·∫£n h·ªìi gi·∫£ l·∫≠p t·ª´ BAchan
def generate_bachan_response(user_input):
    # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API BAchan v√† nh·∫≠n ph·∫£n h·ªìi th·ª±c t·∫ø
    # ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng ph·∫£n h·ªìi d·ª±a tr√™n c√°c t·ª´ kh√≥a
    
    # Chuy·ªÉn ƒë·ªïi input sang ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ d√†ng so s√°nh
    input_lower = user_input.lower()
    
    # Dictionary ch·ª©a c√°c m·∫´u c√¢u h·ªèi v√† ph·∫£n h·ªìi
    responses = {
        "xin ch√†o": "Xin ch√†o! T√¥i l√† BAchan, tr·ª£ l√Ω ·∫£o c·ªßa FPT AI. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
        "gi√∫p": "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi nhi·ªÅu t√°c v·ª• kh√°c nhau nh∆∞:\n- Thu th·∫≠p v√† ph√¢n t√≠ch d·ªØ li·ªáu\n- L√™n l·ªãch h·ªçp v√† qu·∫£n l√Ω nhi·ªám v·ª•\n- T·∫°o b√°o c√°o t·ª± ƒë·ªông\n- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ FPT AI\nB·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ c·ª• th·ªÉ n√†o?",
        "d·ªØ li·ªáu": "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n truy c·∫≠p v√† ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau bao g·ªìm FPT.AI, Maya Portal ho·∫∑c t·ª´ c√°c file b·∫°n t·∫£i l√™n. B·∫°n mu·ªën l√†m vi·ªác v·ªõi d·ªØ li·ªáu n√†o?",
        "b√°o c√°o": "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√°c lo·∫°i b√°o c√°o kh√°c nhau nh∆∞ b√°o c√°o hi·ªáu su·∫•t, b√°o c√°o d·ª± √°n, b√°o c√°o t√†i ch√≠nh... B·∫°n c·∫ßn lo·∫°i b√°o c√°o n√†o?",
        "l·ªãch h·ªçp": "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l√™n l·ªãch h·ªçp m·ªõi. Vui l√≤ng cung c·∫•p th√¥ng tin v·ªÅ ti√™u ƒë·ªÅ, th·ªùi gian v√† ng∆∞·ªùi tham gia.",
        "fpt ai": "FPT AI l√† b·ªô ph·∫≠n nghi√™n c·ª©u v√† ph√°t tri·ªÉn tr√≠ tu·ªá nh√¢n t·∫°o c·ªßa T·∫≠p ƒëo√†n FPT. Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu s·∫£n ph·∫©m v√† d·ªãch v·ª• AI nh∆∞ x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n, computer vision, chatbot v√† nhi·ªÅu gi·∫£i ph√°p AI t√πy ch·ªânh kh√°c.",
        "tr·ª£ gi√∫p": "T√¥i ƒëang ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n! Vui l√≤ng cho t√¥i bi·∫øt b·∫°n c·∫ßn tr·ª£ gi√∫p v·ªÅ v·∫•n ƒë·ªÅ g√¨, v√† t√¥i s·∫Ω c·ªë g·∫Øng h·∫øt s·ª©c ƒë·ªÉ gi√∫p b·∫°n.",
    }
    
    # Ki·ªÉm tra t·ª´ng t·ª´ kh√≥a trong input
    for keyword, response in responses.items():
        if keyword in input_lower:
            return response
    
    # Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a ph√π h·ª£p
    return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. T√¥i ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c t√°c v·ª• li√™n quan ƒë·∫øn d·ªØ li·ªáu FPT AI, qu·∫£n l√Ω l·ªãch h·ªçp, t·∫°o b√°o c√°o v√† nhi·ªÅu vi·ªác kh√°c. Vui l√≤ng cho t√¥i bi·∫øt chi ti·∫øt h∆°n v·ªÅ nhu c·∫ßu c·ªßa b·∫°n."